#!/usr/local/bin/php
<?php

$user_directory = trim(shell_exec("cd ~; pwd"));
$hedron_directory = $user_directory . DIRECTORY_SEPARATOR . '.hedron';
$autoloader_file = $hedron_directory . DIRECTORY_SEPARATOR . 'hedron' . DIRECTORY_SEPARATOR . 'vendor' . DIRECTORY_SEPARATOR . 'autoload.php';
if (!file_exists($autoloader_file)) {
  throw new \Exception("Hedron core could not be found, consult a system administrator to determine if this project is setup correctly.");
}
/** @var \Composer\Autoload\ClassLoader $autoloader */
$autoloader = require $autoloader_file;

use Hedron\Bootstrap;
use Hedron\Command\CommandStackFactory;
use Hedron\File\FileSystem;
use Hedron\GitPostReceiveHandler;
use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\EventDispatcher\DependencyInjection\RegisterListenersPass;

$container = new ContainerBuilder();
$container->addCompilerPass(new RegisterListenersPass());
$container->setParameter('autoloader', $autoloader);
// Extract namespaces to find any available plugins.
$container->setParameter('namespaces', Bootstrap::extractNamespaces($autoloader));
$container->setParameter('command_input', trim(fgets(STDIN)));
$container->setParameter('environment', Bootstrap::getEnvironmentVariables());
$container->setParameter('configuration', Bootstrap::getConfiguration($container->getParameter('command_input')));
$container->setParameter('file.system', new FileSystem());
$container->setParameter('command.stack.factory', new CommandStackFactory());

Bootstrap::collectServices($container, $container->getParameter('namespaces'));
/** @var \Hedron\FileParserInterface[] $plugins */
$plugins = Bootstrap::getValidParsers(
  $container->get('dictionary.project.type'),
  $container->get('dictionary.parser'),
  $container->get('event_dispatcher'),
  $container->getParameter('environment'),
  $container->getParameter('configuration'),
  $container->getParameter('file.system')
);

// Operate against the git post-receive hook.
$console = new GitPostReceiveHandler($container->getParameter('configuration'), $container->getParameter('command.stack.factory'), ...$plugins);
$console->run();

?>
